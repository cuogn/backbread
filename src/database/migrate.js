const fs = require('fs').promises;
const path = require('path');
const { executeQuery } = require('../config/database');

const runMigration = async () => {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu ch·∫°y migration database PostgreSQL...');

    // ƒê·ªçc file schema.sql
    const schemaPath = path.join(__dirname, '../../database/schema.sql');
    const sqlContent = await fs.readFile(schemaPath, 'utf8');

    // T√°ch c√°c c√¢u l·ªánh SQL (c·∫£i thi·ªán cho PostgreSQL)
    const statements = [];
    let currentStatement = '';
    let inFunction = false;
    let braceCount = 0;
    
    const lines = sqlContent.split('\n');
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // Skip comments and empty lines
      if (trimmedLine.startsWith('--') || trimmedLine === '') {
        continue;
      }
      
      currentStatement += line + '\n';
      
      // Check if we're in a function definition
      if (trimmedLine.includes('CREATE OR REPLACE FUNCTION') || trimmedLine.includes('CREATE FUNCTION')) {
        inFunction = true;
        braceCount = 0;
      }
      
      // Count braces in function
      if (inFunction) {
        braceCount += (trimmedLine.match(/\{/g) || []).length;
        braceCount -= (trimmedLine.match(/\}/g) || []).length;
        
        // Function ends when brace count reaches 0
        if (braceCount === 0 && trimmedLine.includes('$$')) {
          inFunction = false;
          statements.push(currentStatement.trim());
          currentStatement = '';
          continue;
        }
      }
      
      // Regular statement ends with semicolon
      if (!inFunction && trimmedLine.endsWith(';')) {
        statements.push(currentStatement.trim());
        currentStatement = '';
      }
    }
    
    // Add any remaining statement
    if (currentStatement.trim()) {
      statements.push(currentStatement.trim());
    }

    console.log(`üìù T√¨m th·∫•y ${statements.length} c√¢u l·ªánh SQL`);

    // Th·ª±c thi t·ª´ng c√¢u l·ªánh
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      
      try {
        await executeQuery(statement);
        console.log(`‚úÖ Th·ª±c thi th√†nh c√¥ng c√¢u l·ªánh ${i + 1}/${statements.length}`);
      } catch (error) {
        // B·ªè qua l·ªói PostgreSQL-specific
        if (error.code === '42P07' || // duplicate_table
            error.code === '42710' || // duplicate_object
            error.code === '42P06' || // duplicate_schema
            error.code === '42P01' || // undefined_table (for indexes that might be created before tables)
            error.message.includes('already exists') ||
            error.message.includes('duplicate key') ||
            error.message.includes('relation') && error.message.includes('already exists')) {
          console.log(`‚ö†Ô∏è  B·ªè qua c√¢u l·ªánh ${i + 1}: ${error.message}`);
          continue;
        }
        
        // Log the error for debugging
        console.error(`‚ùå L·ªói ·ªü c√¢u l·ªánh ${i + 1}:`, error.message);
        console.error(`SQL: ${statement.substring(0, 100)}...`);
        throw error;
      }
    }

    console.log('‚úÖ Migration PostgreSQL ho√†n th√†nh th√†nh c√¥ng!');
    console.log('üìä Database ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi c·∫•u tr√∫c:');
    console.log('   - Categories (Danh m·ª•c)');
    console.log('   - Products (S·∫£n ph·∫©m)');
    console.log('   - Branches (Chi nh√°nh)');
    console.log('   - Customers (Kh√°ch h√†ng)');
    console.log('   - Payment Methods (Ph∆∞∆°ng th·ª©c thanh to√°n)');
    console.log('   - Admin Users (Qu·∫£n tr·ªã vi√™n)');
    console.log('   - Orders (ƒê∆°n h√†ng)');
    console.log('   - Order Items (Chi ti·∫øt ƒë∆°n h√†ng)');
    console.log('üí° D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c th√™m v√†o database');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ch·∫°y migration:', error.message);
    throw error;
  }
};

// Ch·∫°y migration n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  runMigration()
    .then(() => {
      console.log('üéâ Migration th√†nh c√¥ng!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Migration th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = runMigration;
